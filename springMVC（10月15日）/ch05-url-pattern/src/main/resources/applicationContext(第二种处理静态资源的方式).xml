<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--组件扫描器-->
    <context:component-scan base-package="com.ys.controller"/>
    <!--注册视图解析器：帮助我们处理视图的路径和扩展名。生成视图对象-->
    <!--注册内部资源视图解析器InternalResourceViewResolver-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--前缀：视图文件的路径-->
        <property name="prefix" value="/WEB-INF/view/" />
        <!--后缀：视图文件的扩展名-->
        <property name="suffix" value=".jsp" />
    </bean>

    <!--第二种处理静态资源的方式
        mvc:resources加入后框架会创建ResourceHttpRequestHandler这个处理器对象。
        让这个对象处理静态资源的访问，不依赖tomcat服务器。
            mapping：访问静态资源的uri地址，使用通配符**
            location：表示静态资源所在目录。当然，目录不要使用/WEB-INF/及其子目录。
    -->
    <mvc:resources mapping="/images/**" location="/images/"/>
    <mvc:resources mapping="/js/**" location="/js/"/>
    <mvc:resources mapping="/html/**" location="/html/"/>

    <!--使用一个配置语句，指定多种静态资源的访问-->
    <mvc:resources mapping="/static/**" location="/static/"/>

    <!--mvc:resources和@RequestMapping有一定的冲突,需要加注解驱动解决-->
    <mvc:annotation-driven/>
</beans>