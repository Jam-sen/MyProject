<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!--声明，注册springmvc的核心对象DispatcherServlet
        需要在tomcat服务器启动后，创建DispatcherServlet对象的实例。
        为什么要创建DispatcherServlet对象的实例呢？
        因为DispatcherServlet在他的创建过程中，会同时创建springmvc容器对象，
        读取springmvc的配置文件，把这个配置文件中的对象都创建好， 当用户发起
        请求时就可以直接使用对象了。
         servlet的初始化会执行init（）方法。 DispatcherServlet在init（）中会读取applicationContext配置文件，并创建容器对象，并且会把容器对象放入到ServletContext（全局作用域对象）中。
    -->
    <servlet>
        <servlet-name>dispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--springmvc创建容器对象时，读取的配置文件默认路径是/WEB-INF/<servlet-name>-servlet.xml，如果这个路径下没有找到配置文件，会报FileNotFound的异常。可以使用<init-param>标签自己指定读取配置文件的路径-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>
        <!--在<servlet/>中添加<load-on-startup/>的作用是，标记是否在Web服务器启动时创建创建这个Servlet实例，即是否在Web服务器启动时调用执行该Servlet的init()方法，而不是在真正访问时才创建。
            它的值必须是一个整数
            它的值大于等于0时，表示容器在启动时就加载并初始化这个servlet，数值越小，该servlet的优先级越高，其被创建的也就越早；
            当值小于0或者没有指定时，则表示该servlet在真正被使用时才会去创建；
            当值相同时，容器会自己选择创建顺序。
        -->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <!--
        使用框架的时候， url-pattern可以使用两种值
            1. 使用扩展名方式， 语法 *.xxxx , xxxx是自定义的扩展名。常用的方式 *.do, *.action, *.mvc等等。但不能使用 *.jsp
               url显示为：http://localhost:8080/myweb/some.do
                        http://localhost:8080/myweb/other.do
            2.使用斜杠 "/"
    -->
    <servlet-mapping>
        <servlet-name>dispatcherServlet</servlet-name>
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>
</web-app>